#!/usr/bin/env python

# Copyright (C) 2014 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU General Public License v2
#

from gi.repository import Gtk, Gdk
import os
import sys

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

from kano.utils import is_installed, write_file_contents
from kano.network import is_internet
from kano_video.youtube import search_youtube_by_user, parse_youtube_entries, \
    search_youtube_by_keyword, get_video_file_url
from kano_video.paths import css_dir
from kano_video.icons import set_from_name


def make_top_bar(title):
    height = 44

    eb = Gtk.EventBox()
    eb.get_style_context().add_class('top_bar_container')

    header = Gtk.Label(title)
    header.set_size_request(400, height)
    header.get_style_context().add_class('header')

    cross = set_from_name('cross')

    close_button = Gtk.Button()
    close_button.set_image(cross)
    close_button.set_size_request(height, height)
    close_button.set_can_focus(False)
    close_button.get_style_context().add_class("top_bar_button")
    close_button.connect('clicked', Gtk.main_quit)

    grid = Gtk.Grid()
    grid.attach(header, 0, 0, 1, 1)
    grid.attach(close_button, 1, 0, 1, 1)
    grid.set_size_request(0, height)

    eb.add(grid)
    return eb


def make_video_list():
    row_height = 30

    grid = Gtk.Grid()
    grid.set_row_spacing(10)
    grid.set_size_request(400, 400)

    entries = search_youtube_by_user('KanoComputing')
    # entries = search_youtube_by_keyword()
    parsed_entries = parse_youtube_entries(entries)

    for i, e in enumerate(parsed_entries):
        # author
        # description
        # duration, duration_min, duration_sec
        # title
        # video_url
        # viewcount

        x_pos = 0

        button = Gtk.Button('Play')
        button.set_size_request(50, row_height)
        button.connect('clicked', play_video, e['video_url'], False)
        grid.attach(button, x_pos, i, 1, 1)
        x_pos += 1

        button = Gtk.Button('FS')
        button.set_size_request(20, row_height)
        button.connect('clicked', play_video, e['video_url'], True)
        grid.attach(button, x_pos, i, 1, 1)
        x_pos += 1

        button = Gtk.Button('Stop')
        button.set_size_request(20, row_height)
        button.connect('clicked', stop_videos)
        grid.attach(button, x_pos, i, 1, 1)
        x_pos += 1

        title_str = e['title'] if len(e['title']) <= 40 else e['title'][:37] + '...'
        label = Gtk.Label(title_str)
        label.set_size_request(400, row_height)
        grid.attach(label, x_pos, i, 1, 1)
        x_pos += 1

        duration_str = '{}:{}'.format(e['duration_min'], e['duration_sec'])
        label = Gtk.Label(duration_str)
        label.set_size_request(50, row_height)
        grid.attach(label, x_pos, i, 1, 1)
        x_pos += 1

        viewcount_str = '{}k'.format(int(e['viewcount'] / 1000.0))
        label = Gtk.Label(viewcount_str)
        label.set_size_request(50, row_height)
        grid.attach(label, x_pos, i, 1, 1)
        x_pos += 1

        label = Gtk.Label(e['author'])
        label.set_size_request(100, row_height)
        grid.attach(label, x_pos, i, 1, 1)

    align = Gtk.Alignment(xalign=0.5, yalign=0.5, xscale=0, yscale=0)
    padding = 20
    align.set_padding(padding, padding, padding, padding)
    align.add(grid)
    return align


def play_video(_button, video_url, fullscreen):
    print 'Getting video url: {}'.format(video_url)
    success, data = get_video_file_url(video_url)
    if not success:
        print 'Error with getting Youtube url: {}'.format(data)
        return

    print 'Launching player...'

    if omxplayer_present:
        if fullscreen:
            player_cmd = 'lxterminal -e "omxplayer -b \\"{url}\\""'.format(url=data)
        else:
            file_str = 'kano-window-tool -dno -t omxplayer -x 100 -y 100 -w 300 -h 180\n'
            file_str += 'omxplayer --win "100 100 420 280" "{url}"\n'.format(url=data)
            file_path = '/tmp/omxplayer.sh'
            write_file_contents(file_path, file_str)
            player_cmd = 'lxterminal -t omxplayer -e "bash {}"'.format(file_path)
    else:
        if fullscreen:
            player_cmd = 'vlc -f --no-video-title-show "{url}"'.format(url=data)
        else:
            player_cmd = 'vlc --width 700 --no-video-title-show "{url}"'.format(url=data)

    print player_cmd
    os.system(player_cmd)
    # run_cmd(player_cmd)


def stop_videos(_button):
    if omxplayer_present:
        os.system('killall omxplayer.bin')
    else:
        os.system('killall vlc')


class MainWindow(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self, title='Kano Video')

        self.set_decorated(False)
        self.set_position(Gtk.WindowPosition.CENTER)

        grid = Gtk.Grid()
        self.add(grid)

        top_bar = make_top_bar('Kano Video')
        grid.attach(top_bar, 0, 0, 1, 1)

        video_list = make_video_list()
        grid.attach(video_list, 0, 1, 1, 1)


def main():
    if not omxplayer_present and not vlc_present:
        sys.exit('Neither vlc nor omxplayer is installed!')

    # Create style sheet
    cssProvider = Gtk.CssProvider()
    css_file = os.path.join(css_dir, 'kano-video.css')
    if not os.path.exists(css_file):
        sys.exit('CSS file missing!')
    cssProvider.load_from_path(css_file)

    screen = Gdk.Screen.get_default()
    styleContext = Gtk.StyleContext()
    styleContext.add_provider_for_screen(screen, cssProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER)

    win = MainWindow()
    win.connect('delete-event', Gtk.main_quit)
    win.show_all()
    Gtk.main()


if __name__ == '__main__':
    if not is_internet():
        sys.exit('No internet')

    omxplayer_present = is_installed('omxplayer')
    vlc_present = is_installed('vlc')

    main()




