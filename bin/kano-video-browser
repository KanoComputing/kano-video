#!/usr/bin/kano-splash loader-animation /usr/bin/env python

# Copyright (C) 2015 - 2018 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# Command line wrapper to Kano Video Chromium version to watch YouTube videos
#

from kano.gtk3.kano_dialog import KanoDialog
from kano.utils import run_cmd, has_min_performance, RPI_2_B_SCORE
from kano.logging import logger
from kano_settings.system.advanced import get_parental_level

from gi.repository import Gtk
import os
import sys

if __name__ == '__main__' and __package__ is None:
    dir_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
    if dir_path != '/usr':
        sys.path.insert(1, dir_path)

try:
    from kano_profile.tracker import Tracker
    kanotracker = Tracker()
except:
    pass

from kano.network import is_internet


def main():

    # Launch Chromium youtube mode
    os.system('(sleep 3 ; kano-stop-splash) &')
    run_cmd(
        '/usr/bin/chromium-browser '
        '--start-maximized '
        '--force-device-scale-factor=1.2 '
        '--app=http://os-redirect.kano.me/kano_youtube'
    )


if __name__ == '__main__':

    # This app cannot be sudoed, because we instruct Chromium
    # to pull user settings
    if os.getuid() == 0:
        logger.error('This app cannot be run as root, please start it from the Desktop')
        os.system('kano-stop-splash')
        exit(1)

    # Check if parental control is in Ultimate mode (3)
    if get_parental_level() == 3:
        # Close splash before launching dialogue
        os.system('kano-stop-splash')
        head = 'Whoops!'
        msg = "I can\'t show you videos because my parental settings are" \
            " turned on."
        dialog = KanoDialog(head, msg)
        dialog.run()
        exit(0)

    # Check if not RPi2
    if not has_min_performance(RPI_2_B_SCORE):
        # Close splash before launching dialogue
        os.system('kano-stop-splash')
        head = 'Powerup!'
        msg = "Playing video uses all of my brainpower, and sometimes" \
            " it\'s hard for me to keep up. I\'ll try, but for the best" \
            " experience upgrade my brain and get all the new powers! \n" \
            "Visit: http://powerup.kano.me/"
        dialog = KanoDialog(head, msg)
        dialog.run()

        # This is to force the dialog to close on clicking OK
        while Gtk.events_pending():
            Gtk.main_iteration()

    # If there are VNC connected clients, show a warning message
    if os.path.isfile('/usr/bin/kano-vnc'):
        _, _, rc = run_cmd('/usr/bin/kano-vnc clients')
        if rc == 0:
            # Close splash before launching dialogue
            os.system('kano-stop-splash')
            msg = 'YouTube videos over a VNC session will be played slowly'
            kdialog = KanoDialog(
                title_text='VNC Warning',
                description_text=msg)
            kdialog.run()

            # This is to force the dialog to close on clicking OK
            while Gtk.events_pending():
                Gtk.main_iteration()

    if not is_internet():
        os.system('kano-stop-splash')
        title = 'Oh No'
        desc = 'You need to be connected to the Internet. ' \
            'Click on the OK button to set up your WiFi'
        confirm = KanoDialog(
            title_text=title,
            description_text=desc,
            button_dict={
                'OK': {
                    'return_value': True,
                    'color': 'green'
                },
                'QUIT': {
                    'return_value': False,
                    'color': 'red'
                }

            },
            hide_from_taskbar=True
        )
        keep_on = confirm.run()

        if not keep_on:
            sys.exit(0)

        run_cmd('sudo kano-wifi-gui')

        if not is_internet():
            title = 'Oh No'
            desc = 'It looks like something went wrong. ' \
                'Your Kano kit is still not connected to the Internet.'
            KanoDialog(
                title_text=title,
                description_text=desc,
                button_dict={
                    'QUIT': {
                        'color': 'red'
                    }
                },
                hide_from_taskbar=True
            ).run()
            sys.exit(0)

    main()
